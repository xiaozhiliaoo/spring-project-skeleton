<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

    <description>Data source config</description>

    <import resource="mybatis-service-config.xml"/>

    <bean id="data_dataSource" class="org.lili.datasource.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="dataSource_service_master" value-ref="dataSource_service"/>
                <entry key="dataSource_service_master_read" value-ref="dataSource_service_read"/>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="dataSource_service"/>
    </bean>

    <bean id="dataSourceInterceptor" class="org.lili.datasource.DataSourceInterceptor"/>
    <aop:config>
        <aop:aspect id="dataSourceAspect" ref="dataSourceInterceptor">
            <aop:pointcut id="service_master" expression="execution(* org.lili.dao..*.*(..))"/>
            <aop:before method="setDataSourceServiceMaster" pointcut-ref="service_master"/>
            <aop:after method="removedataSource" pointcut-ref="service_master"/>
        </aop:aspect>
    </aop:config>

    <!-- 配置SqlSessionFactoryBean -->
    <bean id="sqlSessionFactoryManage" name="sqlSessionFactoryManage" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="data_dataSource" />
        <!-- mapper和resultmap配置路径 -->
        <property name="mapperLocations">
            <list>
                <value>classpath:org/lili/dao/**/*Mapper.xml</value>
            </list>
        </property>

        <property name="configLocation" value="classpath:mybatis-typealias.xml" />

        <property name="plugins">
            <array>
               <bean id="tableSegInterceptor" class="org.lili.common.mybatis.MybatisInterceptor">
                    <constructor-arg index="0">
                        <value>debug</value>
                    </constructor-arg>
                    <constructor-arg index="1">
                        <value>1</value>
                    </constructor-arg>
                </bean>
            </array>
        </property>
    </bean>

    <!-- 通过扫描的模式，所有的mapper都继承SqlMapper接口的接口-->
    <bean id="manageMapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="org.lili.dao" />
        <property name="markerInterface" value="org.lili.common.dao.SqlMapper" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryManage" />
    </bean>

    <bean id="transactionManager_master" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="data_dataSource"/>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager_master" order="50" proxy-target-class="true"/>

    <aop:config expose-proxy="true" proxy-target-class="true" />

</beans>